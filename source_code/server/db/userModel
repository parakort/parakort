const mongoose = require("mongoose");
const uniqueValidator = require('mongoose-unique-validator');
const { Schema } = mongoose;


const filterSchema = new Schema({
    male: { type: Boolean, required: true, default: true },
    female: { type: Boolean, required: true, default: true },
    age: {
        min: { type: Number, default: 0 },
        max: { type: Number, default: 100 }
    },
    radius: { type: Number, required: true, default: 10 },
    sports: [{
        sportId: { type: Schema.Types.ObjectId, ref: 'Sport' }, // Reference to the sports collection
        my_level: { type: Number, min: 0, max: 3, default: 0 },
        match_level: [{ type: Number, enum: [1, 2, 3], default: [] }]
    }]
});


const UserSchema = new mongoose.Schema({
    
email: {
    type: String,
    required: [true, "Please provide an email."],
    unique: [true, "Username taken!"],
    maxlength: [100, "Email too long"],
    uniqueCaseInsensitive: true
},

password: {
    type: String,
    required: [true, "Please provide a password!"],
    unique: false,
},

// Dynamic fields
location: {
    lat: { type: Number },
    lon: { type: Number }
},

filters: {
    type: filterSchema
  },


renewal_date: {
    type: Number,
    default: 0
},

pending_device: {
    type: String
},

code: {
    type: Number
},

code_attempts: {
    type: Number,
    default: 0
},

dormant: {
    // Number of days that account has not been accessed
    type: Number,
    default: 0,
},

marked_for_deletion: {
    type: Boolean,
    default: false
},

email_confirmed: {
    type: Boolean,
    default: false
},


tokens: {
    // Defaults to 0. Trial tokens granted once we confirm that registering device id is not in the device pool
    type: Number,
    default: 0
},


devices: {
    type: Array
},

matches: {
    type: Array,
    default: []
},
dislikes: {
    type: Array,
    default: []
},
likers: {
    type: Array,
    default: []
}

}, { strict: false })

UserSchema.plugin(uniqueValidator, {
    message: 'Error, expected {PATH} to be unique.'
  });
  
module.exports = mongoose.model.Users || mongoose.model("User", UserSchema);